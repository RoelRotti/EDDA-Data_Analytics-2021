####
shapiro.test(residuals(chickweights_aov))
attach(chickweights); kruskal.test(weight, feed)
#knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
bread <- read.table("bread.txt", header=TRUE)
attach(bread)
searchengine <- read.table("search.txt", header=TRUE)
attach(searchengine)
# Make table with available information per participant
id = c(1:nrow(searchengine))
skill = searchengine$skill
treatm = NaN*c(1:nrow(searchengine))
randomized = data.frame(id, skill, treatm)
# Order participants by their skill
randomized = randomized[order(randomized$skill),]
# Create randomization table
I=3;B=5;N=1
a = matrix(0, nrow=B, ncol=N*I, byrow=TRUE)
for (i in 1:B)
a[i,] = (sample(1:(N*I)))
#### ADDED:
####
# Create randomization table with student id's
I=3;B=5;N=1
b = matrix(0, nrow=B, ncol=N*I, byrow=TRUE)
for (i in 1:B) {
i
lower = i*I - 2
higher = i*I
b[i,] = (sample(lower:higher))
}
####
# Use randomization table for filling in the treatments per participant id
for (r in 1:B)
for (c in 1:I)
randomized$treatm[(r-1)*I + c] = a[r,c]
# Print randomization table and assigned treatments to participant with a certain skill
a
randomized
b
par(mfrow=c(1,2))
qqnorm(residuals(searchaov));
searchengine <- read.table("search.txt", header=TRUE)
attach(searchengine)
# Make table with available information per participant
id = c(1:nrow(searchengine))
skill = searchengine$skill
treatm = NaN*c(1:nrow(searchengine))
randomized = data.frame(id, skill, treatm)
# Order participants by their skill
randomized = randomized[order(randomized$skill),]
# Create randomization table
I=3;B=5;N=1
a = matrix(0, nrow=B, ncol=N*I, byrow=TRUE)
for (i in 1:B)
a[i,] = (sample(1:(N*I)))
#### ADDED:
####
# Create randomization table with student id's
I=3;B=5;N=1
b = matrix(0, nrow=B, ncol=N*I, byrow=TRUE)
for (i in 1:B) {
i
lower = i*I - 2
higher = i*I
b[i,] = (sample(lower:higher))
}
####
# Use randomization table for filling in the treatments per participant id
for (r in 1:B)
for (c in 1:I)
randomized$treatm[(r-1)*I + c] = a[r,c]
# Print randomization table and assigned treatments to participant with a certain skill
a
randomized
b
par(mfrow = c(1,2))
boxplot(time~skill, main="Time taken to find product per skill level", ylab="Time (s)", xlab="Skill level")
boxplot(time~interface, main="Time taken to find product per interface", ylab="Time (s)", xlab="Interfaces")
interaction.plot(skill, interface, time, main="Interaction plot for skill vs interface")
interaction.plot(interface, skill, time, main="Interaction plot for interface vs skill")
skill = as.factor(skill)
interface = as.factor(interface)
searchaov = lm(time~skill+interface)
anova(searchaov)
summary(searchaov)
par(mfrow=c(1,2))
qqnorm(residuals(searchaov));
plot(fitted(searchaov),residuals(searchaov), main= "Residuals searchengine vs fitted")
friedman.test(time, interface, skill)
cow <- read.table("cow.txt", header=TRUE)
attach(cow)
per = as.factor(per); id = as.factor(cow$id)
austen <- read.table("austen.txt", header=TRUE)
attach(austen)
aus <- chisq.test(austen)
aus
residuals(aus)
fakeaus <- aus$residuals[,4]
avgausten <- rowSums(ja$residuals)/3;difference = fakeaus-avgausten
janeausten <- austen[,1:3] # only leave columns from real austen
ja <- chisq.test(janeausten)
ja
ja$expected
residuals(ja)
style <- rowSums(abs(ja$residuals)); style
aus <- chisq.test(austen)
aus
residuals(aus)
fakeaus <- aus$residuals[,4]
avgausten <- rowSums(ja$residuals)/3;difference = fakeaus-avgausten
fakeaus # residuals of the admirer
avgausten  # averaged residuals of Austen
difference # difference in residuals between austen and the admirer
detach(austen)
expensescrime <- read.table("expensescrime.txt", header = TRUE)
attach(expensescrime)
knitr::opts_chunk$set(echo = TRUE)
flies <- read.table("fruitflies.txt", header=TRUE)
attach(flies)
loglongevity <- log(longevity); flies$loglongevity <- loglongevity
activity = as.factor(activity)
plot(loglongevity~thorax, pch= c(15, 16, 17), col=c("green", "red", "blue"))
legend(0.64, 4.5, legend=c("high", "low", "isolated"), pch= c(15, 16, 17), col=c("green", "red", "blue"))
title("Plot sexual activity fruitflies")
abline(lm(loglongevity~thorax,data=flies[activity=='low',]), col = "red")
abline(lm(loglongevity~thorax,data=flies[activity=="high",]), col = "green")
abline(lm(loglongevity~thorax,data=flies[activity=="isolated",]), col = "blue")
flies_wrong = lm(loglongevity~activity)
anova(flies_wrong)
summary(flies_wrong)
flies_correct = lm(loglongevity~thorax+activity)
drop1(flies_correct, test = "F")
summary(flies_correct)
mean(thorax)
flies2=lm(loglongevity~thorax,data=flies)
anova(flies2)
flies3=lm(loglongevity~thorax*activity,data=flies)
anova(flies3)
par(mfrow=c(1,4))
qqnorm(residuals(flies_correct), main="QQnorm for full log-model")
plot(fitted(flies_correct),residuals(flies_correct))
flies4=lm(longevity~thorax+activity,data=flies)
qqnorm(residuals(flies4), main="QQnorm for full no log model")
plot(fitted(flies4),residuals(flies4))
drop1(flies4,test="F")
detach(flies)
par(mfrow=c(1,3))
library(RColorBrewer); coul <- brewer.pal(5, "Set2")
hist(Age) # NA automatically ommited from histogram
titanic <- read.table("titanic.txt", header=TRUE)
#install.packages("ggplot2")
#install.packages("ggpubr")
library(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
attach(titanic)
par(mfrow=c(1,3))
library(RColorBrewer); coul <- brewer.pal(5, "Set2")
hist(Age) # NA automatically ommited from histogram
adultsurv = nrow(titanic[Survived=="1",])/nrow(titanic)
classtable = table(PClass) # all numbers from class
barplot(classtable, main = "Count per class", col=coul)
classsurv = xtabs(Survived~PClass) # all who survived from class
classsurvival = classsurv/classtable;
barplot(classsurvival, main="Survival chance per class", col=coul)
titanicAdult = titanic[Age>=18.00,]
sextable = table(titanicAdult$Sex)
sexsurv = xtabs(titanicAdult$Survived~titanicAdult$Sex)
sexsurvival = sexsurv/sextable;
barplot(sexsurvival, main = "Survival chance per sex for adults", col=coul)
titanicChild = titanic[Age<18.00,]
childsurv = nrow(titanicChild[Survived=="1",])/nrow(titanicChild)
barplot(c(childsurv, adultsurv), main = "Survival chance of adults vs children",
names.arg = c("children", "adults"), col=coul)
PClass = as.factor(PClass)
Sex=as.factor(Sex)
titanicglm <- glm(Survived~PClass+Age+Sex, family = binomial)
summary(titanicglm)
exp(3.76-2.631357*1)
1/0.071
glm3=glm(Survived~Age*PClass,data=titanic,family=binomial)
anova(glm3, test="Chisq")
glm4=glm(Survived~Age*Sex,data=titanic,family=binomial)
anova(glm4, test="Chisq")
titanicglm2=glm(Survived~PClass+Age*Sex,data=titanic,family=binomial)
summary(titanicglm2)
anova(titanicglm2,test="Chisq")
#exp{2.76 -1.54*PClass2nd -2.65*PClass3rd + 0.0024*Age -0.51*Sexmale -0.075591*Age:Sexmale}.
#exp(2.76 -1.54*0 -2.65*0 + 0.0024*53 -0.51*0 -0.075591*0) #Female 1st class
class_vs_survive = table(titanic$Survived, titanic$PClass)
class_vs_survive
sex_vs_survive = table(titanic$Survived, titanic$Sex)
sex_vs_survive
chisq.test(class_vs_survive)
fisher.test(sex_vs_survive) # Fisher since 2x2
#class_vs_sex = xtabs(titanic$PClass, titanic) #<<< aanmaken
# total = xtabs(~Sex+PClass)
# total
# ifsurvived = xtabs(Survived ~Sex+PClass)
# ifsurvived
# percsurvived = round(ifsurvived/total, 3)
# percsurvived
#
# chisq.test(percsurvived)
africa <- read.table("africa.txt", header=TRUE)
attach(africa)
pollib = as.factor(pollib)
africaglm=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numelec+numregim,family=poisson,data=africa)
summary(africaglm)
pairs(africa) # = plot(africa)
knitr::opts_chunk$set(echo = TRUE)
trees <- read.table("treeVolume.txt", header=TRUE)
attach(trees)
View(trees)
is.numeric(trees$volume); is.factor(trees$type)
type_trees_aov = lm (volume~type, data=trees)
anova(type_trees_aov)
trees$type <- as.factor(trees$type)
is.numeric(trees$volume); is.factor(trees$type)
type_trees_aov = lm (volume~type, data=trees)
anova(type_trees_aov)
trees$type <- as.factor(trees$type)
is.numeric(trees$volume); is.factor(trees$type)
type_trees_aov = lm (volume~type, data=trees)
anova(type_trees_aov)
qqnorm(residuals(type_trees_aov))
trees$type <- as.factor(trees$type)
is.numeric(trees$volume); is.factor(trees$type)
type_trees_aov = lm (volume~type, data=trees)
anova(type_trees_aov)
qqnorm(residuals(type_trees_aov))
summary(type_trees_aov)
trees$type <- as.factor(trees$type)
is.numeric(trees$volume); is.factor(trees$type)
type_trees_aov = lm (volume~type, data=trees)
anova(type_trees_aov)
qqnorm(residuals(type_trees_aov))
summary(type_trees_aov)
trees$type <- as.factor(trees$type)
is.numeric(trees$volume); is.factor(trees$type)
type_trees_aov = lm (volume~type, data=trees)
anova(type_trees_aov)
qqnorm(residuals(type_trees_aov))
summary(type_trees_aov)
30.171 + 5.079
beech <- trees$volume[trees$type=="beech"]
beech <- trees$volume[trees$type=="beech"]
oak <- trees$volume[trees$type=="oak"]
beech <- trees$volume[trees$type=="beech"] #31
oak <- trees$volume[trees$type=="oak"] # 28
hist(beech)
hist(oak)
mystat=function(x,y) {mean(x-y)}
B=1000
tstar=numeric(B)
for (i in 1:B){
datasetstar=t(apply(cbind(dataset[,1],dataset[,2]),1,sample))
tstar[i]=mystat(datasetstar[,1], datasetstar[,2])
}
dataset[,1] = beech
dataset = cbind(beech,oak)
mystat=function(x,y) {mean(x-y)}
B=1000
tstar=numeric(B)
for (i in 1:B){
datasetstar=t(apply(cbind(dataset[,1],dataset[,2]),1,sample))
tstar[i]=mystat(datasetstar[,1], datasetstar[,2])
}
t=mystat(dataset[,1],dataset[,2])
# same as in earlier bootstrapping techniques
hist(tstar)
pl=sum(tstar<myt)/B
dataset = cbind(beech,oak)
mystat=function(x,y) {mean(x-y)}
B=1000
tstar=numeric(B)
for (i in 1:B){
datasetstar=t(apply(cbind(dataset[,1],dataset[,2]),1,sample))
tstar[i]=mystat(datasetstar[,1], datasetstar[,2])
}
myt=mystat(dataset[,1],dataset[,2])
# same as in earlier bootstrapping techniques
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
p=2*min(pl,pr)
p # if the p-value is significant the two distributions have different means
dataset = cbind(beech,oak)
mystat=function(x,y) {mean(x-y)}
B=1000
tstar=numeric(B)
for (i in 1:B){
datasetstar=t(apply(cbind(dataset[,1],dataset[,2]),1,sample))
tstar[i]=mystat(datasetstar[,1], datasetstar[,2])
}
myt=mystat(dataset[,1],dataset[,2])
myt
# same as in earlier bootstrapping techniques
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
p=2*min(pl,pr)
p # if the p-value is significant the two distributions have different means
dataset = cbind(beech,oak)
mystat=function(x,y) {mean(x-y)}
B=1000
tstar=numeric(B)
for (i in 1:B){
datasetstar=t(apply(cbind(dataset[,1],dataset[,2]),1,sample))
tstar[i]=mystat(datasetstar[,1], datasetstar[,2])
}
myt=mystat(dataset[,1],dataset[,2])
myt
# same as in earlier bootstrapping techniques
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
p=2*min(pl,pr)
p # if the p-value is significant the two distributions have different means
model = lm(volume~type+diameter+height)
drop1(model, test = "F")
summary(model)
# Assumption check:
qqnorm(residuals(model)) # qqplot for residuals corrected for the different population means
plot(fitted(model),residuals(model))
# Interaction?:
model2=lm(outcome~factor*explanatory_variable);
model = lm(volume~type+diameter+height)
drop1(model, test = "F")
summary(model)
# Assumption check:
qqnorm(residuals(model)) # qqplot for residuals corrected for the different population means
plot(fitted(model),residuals(model))
model = lm(volume~type+diameter+height)
drop1(model, test = "F")
summary(model)
# Assumption check:
qqnorm(residuals(model)) # qqplot for residuals corrected for the different population means
plot(fitted(model),residuals(model))
beech_full = treeVolume[type=="beech",]
beech_full = trees[type=="beech",]
oak_full = trees[type=="oak",]
avg_dia_beech = mean(beech_full$diameter); avg_dia_beech
avg_hei_beech = mean(beech_full$height); avg_hei_beech
avg_dia_oak = mean(oak_full$diameter); avg_dia_oak
avg_hei_oak = mean(oak_full$height); avg_hei_oak
estim_volume_beach = -63.7814 + 0.4172* avg_dia_beech + 4.6981 * avg_hei_beech; estim_volume_beach
estim_volume_oak = -63.7814 + 0.4172* avg_dia_oak + 4.6981 * avg_hei_oak; estim_volume_oak
beech_full = trees[type=="beech",]
oak_full = trees[type=="oak",]
avg_dia_beech = mean(beech_full$diameter); avg_dia_beech
avg_hei_beech = mean(beech_full$height); avg_hei_beech
avg_dia_oak = mean(oak_full$diameter); avg_dia_oak
avg_hei_oak = mean(oak_full$height); avg_hei_oak
estim_volume_beach = -63.7814 + 0.4172* avg_hei_beech + 4.6981 * avg_dia_beech; estim_volume_beach
estim_volume_oak = -63.7814 + 0.4172* avg_hei_oak + 4.6981 * avg_dia_oak; estim_volume_oak
dia_vs_vol = lm(volume~diameter)
anova(dia_vs_vol)
dia_vs_vol = lm(volume~diameter)
anova(dia_vs_vol)
summary(dia_vs_vol)
?areaCircle
?area
?dplyr
?circle
install.packages("circle")
?circle
library(circle)
?circle
dia_vs_vol = lm(beech_full$volume~diameter)
dia_vs_vol = lm(beech_full$volume~beech_full$diameter)
anova(dia_vs_vol)
summary(dia_vs_vol)
dia_vs_vol = lm(beech_full$volume~beech_full$diameter)
anova(dia_vs_vol)
summary(dia_vs_vol)
dia_vs_vol = lm(oak_full$volume~oak_full$diameter)
anova(dia_vs_vol)
summary(dia_vs_vol)
dia_vs_vol = lm(trees$volume~trees$type + trees$diameter)
anova(dia_vs_vol)
summary(dia_vs_vol)
#dia_vs_vol = lm(beech_full$volume~beech_full$diameter)
#anova(dia_vs_vol)
#summary(dia_vs_vol)
#dia_vs_vol = lm(oak_full$volume~oak_full$diameter)
#anova(dia_vs_vol)
#summary(dia_vs_vol)
dia_vs_vol = lm(trees$volume~trees$type + trees$diameter)
drop1(dia_vs_vol)
summary(dia_vs_vol)
#dia_vs_vol = lm(beech_full$volume~beech_full$diameter)
#anova(dia_vs_vol)
#summary(dia_vs_vol)
#dia_vs_vol = lm(oak_full$volume~oak_full$diameter)
#anova(dia_vs_vol)
#summary(dia_vs_vol)
dia_vs_vol = lm(trees$volume~trees$type + trees$diameter)
drop1(dia_vs_vol, test = "F")
summary(dia_vs_vol)
#dia_vs_vol = lm(beech_full$volume~beech_full$diameter)
#anova(dia_vs_vol)
#summary(dia_vs_vol)
#dia_vs_vol = lm(oak_full$volume~oak_full$diameter)
#anova(dia_vs_vol)
#summary(dia_vs_vol)
dia_vs_vol_beech = lm(beech_full$volume~beech_full$diameter)
drop1(dia_vs_vol, test = "F")
summary(dia_vs_vol)
dia_vs_vol_oak = lm(oak_full$volume~oak_full$diameter)
drop1(dia_vs_vol, test = "F")
summary(dia_vs_vol)
plot(volume~diameter, pch= c(15, 16, 17), col=c("green", "red"))
legend(0.64, 4.5, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red")
title("Plot sexual activity fruitflies")
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(0.64, 4.5, legend=c("beech", "oak"), pch= c(15, 16), col=c("green", "red")
title("Plot sexual activity fruitflies")
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(0.64, 4.5, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot sexual activity fruitflies")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
flies_wrong = lm(loglongevity~activity)
anova(flies_wrong)
summary(flies_wrong)
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend( legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(0.64, 4.5, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot sexual activity fruitflies")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
flies_wrong = lm(loglongevity~activity)
anova(flies_wrong)
summary(flies_wrong)
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(0.64, 4.5, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot influence of diameter on volume for trees. oak=red, beech=green")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
flies_wrong = lm(loglongevity~activity)
anova(flies_wrong)
summary(flies_wrong)
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(0.64, 4.5, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot influence of diameter on volume. oak=red, beech=green")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
flies_wrong = lm(loglongevity~activity)
anova(flies_wrong)
summary(flies_wrong)
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(0.64, 4.5, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot influence of diameter on volume. oak=red, beech=green")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(9, 70, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot influence of diameter on volume. oak=red, beech=green")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(9, 70, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot influence of diameter on volume")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
plot(volume~height, pch= c(15, 16), col=c("green", "red"))
legend(9, 70, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot influence of diameter on volume")
abline(lm(volume~height,data=trees[type=='oak',]), col = "red")
abline(lm(volume~height,data=trees[type=="beech",]), col = "green")
plot(volume~height, pch= c(15, 16), col=c("green", "red"))
legend(64, 70, legend=c("beech", "oak"), pch= c(15, 16, 17), col=c("green", "red"))
title("Plot influence of diameter on volume")
abline(lm(volume~height,data=trees[type=='oak',]), col = "red")
abline(lm(volume~height,data=trees[type=="beech",]), col = "green")
plot(volume~height, pch= c(15, 16, 17), col=c("green", "red", "blue"))
legend(64, 70, legend=c("beech", "oak", "combined"), pch= c(15, 16, 17), col=c("green", "red", "blue"))
title("Plot influence of diameter on volume")
abline(lm(volume~height,data=trees[type=='oak',]), col = "red")
abline(lm(volume~height,data=trees[type=="beech",]), col = "green")
abline(lm(volume~height,data=trees), col = "blue")
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(9, 70, legend=c("beech", "oak"), pch= c(15, 16), col=c("green", "red"))
title("Plot influence of diameter on volume")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
plot(volume~height, pch= c(15, 16), col=c("green", "red")
legend(64, 70, legend=c("beech", "oak", "combined"), pch= c(15, 16, 17), col=c("green", "red", "blue"))
plot(volume~height, pch= c(15, 16), col=c("green", "red"))
legend(64, 70, legend=c("beech", "oak", "combined"), pch= c(15, 16, 17), col=c("green", "red", "blue"))
title("Plot influence of diameter on volume")
abline(lm(volume~height,data=trees[type=='oak',]), col = "red")
abline(lm(volume~height,data=trees[type=="beech",]), col = "green")
abline(lm(volume~height,data=trees), col = "blue")
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(9, 70, legend=c("beech", "oak", "combined"), pch= c(15, 16), col=c("green", "red", "blue"))
title("Plot influence of diameter on volume")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
abline(lm(volume~height,data=trees), col = "blue")
plot(volume~diameter, pch= c(15, 16), col=c("green", "red"))
legend(9, 70, legend=c("beech", "oak", "combined"), pch= c(15, 16), col=c("green", "red", "blue"))
title("Plot influence of diameter on volume")
abline(lm(volume~diameter,data=trees[type=='oak',]), col = "red")
abline(lm(volume~diameter,data=trees[type=="beech",]), col = "green")
abline(lm(volume~diameter,data=trees), col = "blue")
View(beech_full)
View(dataset)
